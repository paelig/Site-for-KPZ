[
  {
    "objectID": "server.html",
    "href": "server.html",
    "title": "Функции server",
    "section": "",
    "text": "filter_repos(repos, filters){}\nФункция фильтрации списка репозиториев GitHub по комплексным критериям с поддержкой диапазонных значений и категориальных фильтров.\n\n\n\nГибкая фильтрация по 8 параметрам\nПоддержка диапазонов для числовых значений\nУчет дат создания и обновления\nСпециальная обработка категорий “Все”\nОптимизированная производительность с использованием purrr::keep\n\n\n\n\n\nrepos - список репозиториев из get_user_repos()\nfilters - список критериев фильтрации:\n\nlanguage - язык программирования (“Все” или конкретный)\nstars - диапазон звёзд (integer)\ncreated_date_range - дата создания (Date или строка)\nupdated_date_range - дата обновления (Date или строка)\nissues - диапазон открытых issues\ncontributors - диапазон контрибьюторов\nsize - диапазон размера (в MB)\nlicense - лицензия (“Все” или конкретная)\n\n\n\n\n\nДля каждого репозитория проверяются все условия:\n\nЯзык: Совпадение или “Все”\nЗвёзды: Вхождение в диапазон\nДата создания: В заданном периоде\nДата обновления: В заданном периоде\nIssues: Количество в указанных границах\nКонтрибьюторы: Количество в указанных границах\nРазмер: Преобразуется из KB в MB и проверяется диапазон\nЛицензия: Совпадение или “Все”"
  },
  {
    "objectID": "server.html#особенности",
    "href": "server.html#особенности",
    "title": "Функции server",
    "section": "",
    "text": "Гибкая фильтрация по 8 параметрам\nПоддержка диапазонов для числовых значений\nУчет дат создания и обновления\nСпециальная обработка категорий “Все”\nОптимизированная производительность с использованием purrr::keep"
  },
  {
    "objectID": "server.html#входные-данные",
    "href": "server.html#входные-данные",
    "title": "Функции server",
    "section": "",
    "text": "repos - список репозиториев из get_user_repos()\nfilters - список критериев фильтрации:\n\nlanguage - язык программирования (“Все” или конкретный)\nstars - диапазон звёзд (integer)\ncreated_date_range - дата создания (Date или строка)\nupdated_date_range - дата обновления (Date или строка)\nissues - диапазон открытых issues\ncontributors - диапазон контрибьюторов\nsize - диапазон размера (в MB)\nlicense - лицензия (“Все” или конкретная)"
  },
  {
    "objectID": "server.html#алгоритм-фильтрации",
    "href": "server.html#алгоритм-фильтрации",
    "title": "Функции server",
    "section": "",
    "text": "Для каждого репозитория проверяются все условия:\n\nЯзык: Совпадение или “Все”\nЗвёзды: Вхождение в диапазон\nДата создания: В заданном периоде\nДата обновления: В заданном периоде\nIssues: Количество в указанных границах\nКонтрибьюторы: Количество в указанных границах\nРазмер: Преобразуется из KB в MB и проверяется диапазон\nЛицензия: Совпадение или “Все”"
  },
  {
    "objectID": "server.html#ключевые-модули-и-функции",
    "href": "server.html#ключевые-модули-и-функции",
    "title": "Функции server",
    "section": "Ключевые модули и функции",
    "text": "Ключевые модули и функции\n\n1. Инициализация окружения\ninit_renviron()\nСоздает/проверяет .Renviron файл\nУстанавливает обязательные переменные:\n\nGITHUB_TOKEN, YANDEX_FOLDER_ID, YANDEX_API_KEY\nDUCK_DB, COMMITS_TABLE (значения по умолчанию)\n\nАвтоматически загружает обновленные переменные\n\n\n2. Управление интерфейсом\nВкладки:\n\nГлавное меню (отчет, коммиты, активность и др.)\nНастройки (переменные окружения, другие параметры)\n\nФильтры репозиториев:\n\nЯзык, звезды, даты, issues и др.\n\nАнимация переключения видимости\n\n\n3. Работа с данными\n\nРеактивные значения:\ndata &lt;- reactiveValues(\n  repos = NULL,\n  user_profile = NULL,\n  commits = NULL,\n  activity_data = NULL,\n  language_data = NULL,\n  commit_heatmap_data = NULL\n)\n\n\nОсновные обработчики\n\nЗагрузка профиля (get_user_profile)\nПолучение репозиториев (get_user_repos)\nАнализ коммитов (get_user_commits_df)\nПодготовка данных для визуализации\n\n\n\n\n4. Визуализации\n\nОтчет пользователя\n\nАватар, статистика, топ языков\nСписок репозиториев с фильтрацией\n\n\n\nГрафики\n\nАктивность (issues/forks)\nЯзыки программирования\nТепловая карта коммитов\nPCA-анализ\n\n\n\n\n5. Анализ аномалий\nperform_pca()\ndetect_outliers()\nВыявляет нестандартные коммиты\nФормирует карточки с деталями:\n\nZ-score аномалии\nРасстояние в PCA-пространстве\nДифф изменений\n\n\n\n6. Интеграция с Yandex GPT\nget_response()\nformat_response()\nАнализирует git-патчи через LLM\nФорматирует отчет о рисках:\nУровни: CRITICAL, WARNING, INFO, SAFE\nРекомендации по исправлению\n\n\n7. Управление настройками\nРедактор переменных окружения\nПроверка лимитов GitHub API\nСистема уведомлений"
  },
  {
    "objectID": "server.html#особенности-реализации",
    "href": "server.html#особенности-реализации",
    "title": "Функции server",
    "section": "Особенности реализации",
    "text": "Особенности реализации\n\nБезопасность\n\nПеременные окружения не сохраняются в коде\nПроверка токенов перед запросами\n\n\n\nПроизводительность\n\nКэширование в DuckDB\nПакетная обработка коммитов\nОптимизированные SQL-запросы\n\n\n\nИнтерактивность\n\nАнимации интерфейса\nКонтекстные подсказки\nДинамическая подгрузка\n\n\n\nМасштабируемость\n\nМодульная структура\nПоддержка больших наборов данных\nФоновые процессы"
  },
  {
    "objectID": "server.html#пример-рабочего-процесса",
    "href": "server.html#пример-рабочего-процесса",
    "title": "Функции server",
    "section": "Пример рабочего процесса",
    "text": "Пример рабочего процесса\n\nПользователь вводит GitHub-логин\nПриложение загружает профиль и репозитории\nФильтрует репозитории по заданным критериям\nАнализирует коммиты (сохранение в DuckDB)\nСтроит визуализации:\n\nВременные графики\nРаспределение языков\nPCA-кластеризация\n\nВыявляет аномалии:\n\nНеобычно большие коммиты\nПодозрительные изменения\n\nФормирует интерактивный отчет"
  },
  {
    "objectID": "server.html#обработка-ошибок",
    "href": "server.html#обработка-ошибок",
    "title": "Функции server",
    "section": "Обработка ошибок",
    "text": "Обработка ошибок\n\nПроверка API-лимитов\nGraceful degradation при ошибках\nЛогирование в файл (logs.log)"
  },
  {
    "objectID": "server.html#системные-требования",
    "href": "server.html#системные-требования",
    "title": "Функции server",
    "section": "Системные требования",
    "text": "Системные требования\n\nR 4.0+\nПакеты: httr, dplyr, ggplot2, plotly\nДоступ к GitHub API и Yandex Cloud"
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Как запустить приложение",
    "section": "",
    "text": "Установленный R (https://www.r-project.org/) (R ≥ 4.0)\nУстановленный RStudio (рекомендуется, но не обязательно)\nУстановленные пакеты:\ninstall.packages(c(\"shiny\", \"httr\", \"dplyr\", \"purrr\", \"DT\", \"shinycssloaders\", \n\"plotly\", \"ggplot2\", \"tidyr\", \"fastDummies\", \"shinyjs\", \"shinyBS\", \"duckdb\", \n\"DBI\", \"litedown\", \"markdown\", \"stringr\", \"jsonlite\", \"tools\", \"lubridate\"))"
  },
  {
    "objectID": "install.html#как-запустить-приложение",
    "href": "install.html#как-запустить-приложение",
    "title": "Как запустить приложение",
    "section": "Как запустить приложение",
    "text": "Как запустить приложение\n\nСклонируйте репозиторий:\ngit clone https://github.com/NotAccess/KPZ\nУстановите рабочую директорию в R:\nsetwd(\"путь/к/папке/с/файлами\")\nЗапустите приложение\n\nЗапуск через консоль в в RStudio:\n\n  shiny::runApp()\n\nЗапуск через RStudio:\n\nОткройте склонироавнный репозиторий в RStudio\nОткройте файл app.R\nЗапустите файл app.R с помощью кнопки в правом верхнем углу Run \n\n\nНастройте переменные окружения:\n\nВыберите вкладку настройки\nЗаполните переменные:\nGITHUB_TOKEN=`ваш_токен`\nYANDEX_FOLDER_ID=`идентификатор_каталога`\nYANDEX_API_KEY=`ваш_yandex_api_ключ`\nDUCK_DB=`название_базы_данных`\nCOMMITS_TABLE=`название_таблицы_коммитов`\n\nСохраните настройки\n\nВновь запустите приложение\n\n\nГде взять данные\n\nGITHUB_TOKEN: Создайте в настройках GitHub инструкция по созданию\nYANDEX_FOLDER_ID: Идентификатор каталога в Yandex Cloud\nYANDEX_API_KEY: Создайте в сервисном аккаунте на странице каталога\nDUCK_DB и COMMITS_TABLE могут иметь любое название\n\n\n\nОсобенности\n\nБез GitHub токена работа с API ограничена 60 запросами/час\nВсе переменные из .Renviron должны быть указаны БЕЗ пробелов вокруг =\nФайл .Renviron должен находиться в корне проекта\nПосле изменения переменных всегда перезагружайте R сессию!"
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Пример использования",
    "section": "",
    "text": "Введите логин пользователя GitHub (например, “torvalds”)\nИспользуйте фильтры для:\n\nВыбора диапазона звёзд/участников\nФильтрации по языкам и лицензиям\nНастройки временных диапазонов\n\nИсследуйте вкладки:\n\nРепозитории: Детализация проектов\nКоммиты: Полная история изменений\nСобытия: Графики активности\nЯзыки: Распределение технологий\nАктивность: Тепловая карта коммитов\nМГК: 2D-проекция пространства коммитов"
  },
  {
    "objectID": "ETL.html",
    "href": "ETL.html",
    "title": "Функции ETL",
    "section": "",
    "text": "github_api_get &lt;- function(url) {\n  # обработка запросов по URL к GitHub API\n  if (nzchar(GITHUB_TOKEN)) {\n    response &lt;- GET(url, add_headers(Authorization = paste(\"token\", GITHUB_TOKEN)))\n  } else {\n    flog.warn(\"[WARN] No token provided\")\n    response &lt;- GET(url)\n  }\n  ...\n  return(response)\n}\nФункция отправляет HTTP-запросы к GitHub API с обработкой авторизации и основных ошибок. Поддерживает использование персонального токена для увеличения лимита запросов. Автоматически использует токен из глобальной переменной GITHUB_TOKEN, если она установлена.\n\n\n\nЛогирует все предупреждения и ошибки через flog\nДля запросов использует пакет httr (функции GET и add_headers)\nПри отсутствии токена выводит предупреждение, но продолжает выполнение\n\n\n\n\n\nurl - URL-адрес для запроса к GitHub API (строка)\n\n\n\n\n\nresponse - объект ответа от httr при успешном запросе (код 200)\nNULL - для следующих кодов состояния:\n\n204 (No Content) - репозиторий не содержит данных\n404 (Not Found) - пользователь/репозиторий не найден\n409 (Conflict) - репозиторий пустой\n5xx (Server errors) - ошибки сервера GitHub\n\ngрерывает выполнение с ошибкой (stop()) для:\n\n401 (Unauthorized) - неверный/просроченный токен\n403 (Forbidden) - лимит запросов исчерпан\nВсе другие необработанные коды ошибок (кроме 200)"
  },
  {
    "objectID": "ETL.html#особенности",
    "href": "ETL.html#особенности",
    "title": "Функции ETL",
    "section": "",
    "text": "Логирует все предупреждения и ошибки через flog\nДля запросов использует пакет httr (функции GET и add_headers)\nПри отсутствии токена выводит предупреждение, но продолжает выполнение"
  },
  {
    "objectID": "ETL.html#входные-данные",
    "href": "ETL.html#входные-данные",
    "title": "Функции ETL",
    "section": "",
    "text": "url - URL-адрес для запроса к GitHub API (строка)"
  },
  {
    "objectID": "ETL.html#выходные-данные",
    "href": "ETL.html#выходные-данные",
    "title": "Функции ETL",
    "section": "",
    "text": "response - объект ответа от httr при успешном запросе (код 200)\nNULL - для следующих кодов состояния:\n\n204 (No Content) - репозиторий не содержит данных\n404 (Not Found) - пользователь/репозиторий не найден\n409 (Conflict) - репозиторий пустой\n5xx (Server errors) - ошибки сервера GitHub\n\ngрерывает выполнение с ошибкой (stop()) для:\n\n401 (Unauthorized) - неверный/просроченный токен\n403 (Forbidden) - лимит запросов исчерпан\nВсе другие необработанные коды ошибок (кроме 200)"
  },
  {
    "objectID": "ETL.html#особенности-1",
    "href": "ETL.html#особенности-1",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nПолноценная работа с ветками - обрабатывает коммиты во всех ветках каждого репозитория\nИнтеллектуальное кэширование:\n\nАвтоматически создает и использует индексованную таблицу в DuckDB\nПропускает уже обработанные коммиты (по SHA)\nПакетная запись данных (оптимизация производительности)\n\nРасширенное отслеживание прогресса:\n\nДвухэтапный процесс (сбор SHA + детальная обработка)\nРасчет оставшегося времени выполнения\nНадежная обработка ошибок с детальным логированием"
  },
  {
    "objectID": "ETL.html#входные-данные-1",
    "href": "ETL.html#входные-данные-1",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\nrepos - список репозиториев из get_user_repos()\nsetProgress - функция для обновления прогресса (опционально)\nbatch_size - размер пакета для записи в БД (по умолчанию 200)\nlog_file - файл для записи логов (по умолчанию ‘logs.log’)"
  },
  {
    "objectID": "ETL.html#выходные-данные-1",
    "href": "ETL.html#выходные-данные-1",
    "title": "Функции ETL",
    "section": "Выходные данные:",
    "text": "Выходные данные:\n\ncommits_df - датафрейм со структурой:\n\nid - SHA коммита\npatch - Diff-патч или “NULL”\nrepo - полное имя репозитория (owner/repo)\nauthor - имя автора коммита\ndate - дата в формате “ГГГГ.ММ.ДД ЧЧ:ММ:СС” (локальное время)\nfilename - путь к файлу\nstatus - статус изменения (added/modified/removed)\nadditions - добавленные строки\ndeletions - удаленные строки\nchanges - общее количество изменений\nmessage - сообщение коммита\nbranch - название ветки"
  },
  {
    "objectID": "ETL.html#детали-реализации",
    "href": "ETL.html#детали-реализации",
    "title": "Функции ETL",
    "section": "Детали реализации",
    "text": "Детали реализации\n\n1. Подготовка БД:\n\nАвтоматическое создание таблицы и индекса при первом запуске\nИспользование переменных окружения (DUCK_DB, COMMITS_TABLE)\n\n\n\n2. Процесс обработки:\n\nЭтап 1: Сбор всех SHA коммитов (по всем веткам)\nЭтап 2: Пакетная обработка новых коммитов\nПропуск существующих записей (по SHA)\n\n\n\n3. Оптимизации:\n\nПакетная запись в БД (контролируется batch_size)\nЛокальное кэширование SHA для минимизации запросов к БД\nПреобразование времени в локальный часовой пояс\n\n\n\n4. Логирование:\n\nЗапись в файл логов (по умолчанию ‘logs.log’)\nРазные уровни детализации (INFO, DEBUG, TRACE)"
  },
  {
    "objectID": "ETL.html#особенности-2",
    "href": "ETL.html#особенности-2",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nАвтоматически обрабатывает все страницы результатов (до 100 репозиториев на страницу)\nОпределяет общее количество страниц из заголовка Link при первом запросе\nДва этапа отслеживания: получение и обработка репозиториев\nРасчёт оставшегося времени в формате HH:MM:SS\nДля каждого репозитория выполняется отдельный запрос для получения количества контрибьюторов\nВозвращает NULL если репозитории не найдены\nПропускает битые репозитории без остановки выполнения"
  },
  {
    "objectID": "ETL.html#входные-данные-2",
    "href": "ETL.html#входные-данные-2",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\nusername - имя пользователя GitHub (обязательный)\nsetProgress - функция для обновления прогресс-бара (обязательный), должна поддерживать:\n\nmessage - основной текст статуса\nvalue - текущий прогресс (0-1)\ndetail - детализация (количество/время)"
  },
  {
    "objectID": "ETL.html#выходные-данные-2",
    "href": "ETL.html#выходные-данные-2",
    "title": "Функции ETL",
    "section": "Выходные данные",
    "text": "Выходные данные\n\nrepo_data - список с данными о каждом репозитории, содержащий:\n\nusername - логин владельца\navatar - URL аватара владельца\nname - название репозитория\nfull_name - полное имя (user/repo)\ndescription - описание или “Нет описания”\nlanguage - основной язык или “Не указан”\nstars - количество звёзд\nforks - количество форков\ncreated_at, updated_at - даты в POSIXct\nurl - HTML-ссылка на репозиторий\nopen_issues - количество открытых issues\ncontributors - число контрибьюторов\nis_fork - логическое значение (TRUE/FALSE)\nlicense - название лицензии или “Нет лицензии”\nsize - размер в KB"
  },
  {
    "objectID": "ETL.html#особенности-3",
    "href": "ETL.html#особенности-3",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nКомпактная реализация с обработкой NULL-значений\nАвтоматическая подстановка значений по умолчанию для пустых полей\nВозвращает готовую структуру для отображения профиля\nИнтеграция с github_api_get для обработки ошибок API"
  },
  {
    "objectID": "ETL.html#входные-данные-3",
    "href": "ETL.html#входные-данные-3",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\nusername - логин пользователя GitHub"
  },
  {
    "objectID": "ETL.html#выходные-данные-3",
    "href": "ETL.html#выходные-данные-3",
    "title": "Функции ETL",
    "section": "Выходные данные",
    "text": "Выходные данные\n\nprofile_data\n\nname - логин пользователя\nbio - биография или “Биография не указана”\navatar_url - URL аватара\ncreated_at - дата создания аккаунта (ISO 8601)\nupdated_at - дата обновления профиля\ncompany - название компании или NULL\nlocation - город/страна или NULL\nfollowers - количество подписчиков\nfollowing - количество подписок\npublic_repos - количество публичных репозиториев\nhtml_url - ссылка на профиль\nblog - URL блога/сайта или NULL\n\nNULL если:\n\nпользователь не найден (404)\nошибка доступа к API\nневерный формат ответа"
  },
  {
    "objectID": "ETL.html#особенности-4",
    "href": "ETL.html#особенности-4",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nСоздает “длинный” формат данных, подходящий для построения временных графиков\nРазделяет данные на два типа активности: Issues и Forks\nАвтоматически фильтрует NULL-входные данные\nПреобразует даты в формат Date для удобства визуализации"
  },
  {
    "objectID": "ETL.html#входные-данные-4",
    "href": "ETL.html#входные-данные-4",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\nrepos - список репозиториев, полученный из get_user_repos(). Каждый элемент должен содержать:\n\ncreated_at - дата создания репозитория (в формате, конвертируемом в Date)\nupdated_at - дата последнего обновления репозитория\nopen_issues - количество открытых issues (числовое)\nforks - количество форков (числовое)"
  },
  {
    "objectID": "ETL.html#выходные-данные-4",
    "href": "ETL.html#выходные-данные-4",
    "title": "Функции ETL",
    "section": "Выходные данные:",
    "text": "Выходные данные:\n\nactivity_data - датафрейм в “длинном” формате с колонками:\n\ndate - Дата (тип Date)\ncount - Числовое значение:\n\nДля типа “Issues” - количество открытых issues\nДля типа “Forks” - количество форков\n\ntype - Тип активности (фактор с уровнями “Issues” и “Forks”)"
  },
  {
    "objectID": "ETL.html#логика-работы",
    "href": "ETL.html#логика-работы",
    "title": "Функции ETL",
    "section": "Логика работы",
    "text": "Логика работы\n\nДля Issues использует:\n\nДату создания репозитория (created_at)\nКоличество открытых issues (open_issues)\n\nДля Forks использует:\n\nДату последнего обновления (updated_at)\nКоличество форков (forks)\n\nОбъединяет оба типа активности в один датафрейм"
  },
  {
    "objectID": "ETL.html#особенности-5",
    "href": "ETL.html#особенности-5",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nФильтрация данных - автоматически игнорирует репозитории без указанного языка\nАгрегация - группирует одинаковые языки и подсчитывает количество репозиториев\nПростота - минимальная обработка данных для последующей визуализации"
  },
  {
    "objectID": "ETL.html#входные-данные-5",
    "href": "ETL.html#входные-данные-5",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\nrepos - список репозиториев (результат get_user_repos()), где каждый элемент должен содержать:\n\nlanguage - название языка программирования (строка) или NULL\n\n\nВыходные данные: - language_data - датафрейм с двумя столбцами: - language - название языка программирования - count - количество репозиториев на этом языке"
  },
  {
    "objectID": "ETL.html#алгоритм-работы",
    "href": "ETL.html#алгоритм-работы",
    "title": "Функции ETL",
    "section": "Алгоритм работы",
    "text": "Алгоритм работы\n\nФильтрация:\n\nОтбрасывает репозитории с language = NULL\nИгнорирует пустые/неопределенные значения\n\nПреобразование:\n\nСоздает промежуточный датафрейм с 1 строкой на каждый язык каждого репозитория\nПрисваивает значение count = 1 для каждого случая\n\nАгрегация:\n\nГруппирует данные по названию языка\nСуммирует количество репозиториев для каждого языка"
  },
  {
    "objectID": "ETL.html#особенности-6",
    "href": "ETL.html#особенности-6",
    "title": "Функции ETL",
    "section": "Особенности",
    "text": "Особенности\n\nПоддержка русского языка - использует русские названия дней недели\nДубликаты - автоматически удаляет повторяющиеся коммиты по полю id\nЧасовые пояса - корректно работает с UTC временем\nГибкая группировка - агрегирует данные по часам и дням недели"
  },
  {
    "objectID": "ETL.html#входные-данные-6",
    "href": "ETL.html#входные-данные-6",
    "title": "Функции ETL",
    "section": "Входные данные",
    "text": "Входные данные\n\ncommits - датафрейм с коммитами (результат get_user_commits_df()), должен содержать:\n\nid - уникальный идентификатор коммита\ndate - дата в формате “ГГГГ.ММ.ДД ЧЧ:ММ” (UTC)"
  },
  {
    "objectID": "ETL.html#выходные-данные-5",
    "href": "ETL.html#выходные-данные-5",
    "title": "Функции ETL",
    "section": "Выходные данные",
    "text": "Выходные данные\n\nheatmap_data - датафрейм с тремя столбцами:\n\nhour - час дня (0-23)\nday - день недели\ncount - количество коммитов"
  },
  {
    "objectID": "ETL.html#алгоритм-обработки",
    "href": "ETL.html#алгоритм-обработки",
    "title": "Функции ETL",
    "section": "Алгоритм обработки",
    "text": "Алгоритм обработки\n\nФильтрация данных:\n\nУдаление дубликатов по id\nКонвертация даты в POSIXct (UTC)\nУдаление записей с NA в дате\n\nИзвлечение признаков:\n\nДень недели (на русском, фактор с правильным порядком уровней)\nЧас дня (0-23)\n\nАгрегация:\n\nГруппировка по часам и дням недели\nПодсчёт количества коммитов в каждой группе"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Комплексное программное задание (KPZ): Анализ GitHub пользователя",
    "section": "",
    "text": "Это Shiny-приложение позволяет проводить комплексный анализ активности пользователя GitHub. Приложение предоставляет интерактивные инструменты для изучения репозиториев, коммитов, языков программирования и паттернов активности с использованием современных методов визуализации и ML.\n\nФункциональность\n\nАнализ репозиториев\n\nЗагрузка и фильтрация репозиториев по 8+ параметрам\nДетальная статистика: звёзды, форки, issues, участники\nИнтерактивные временные фильтры (создание/обновление)\nВизуализация метрик в виде интерактивных карточек\n\nАнализ коммитов\n\nПолная история изменений с дезагрегацией до уровня файлов\nРасширенная аналитика: добавления/удаления, типы изменений\nИнтеллектуальная группировка по авторам и репозиториям\n\nПродвинутая аналитика\n\nВременные паттерны:\n\nТепловая карта активности (дни недели × часы)\nДинамика событий (issues/форки) на временной шкале\n\nЯзыковой анализ:\n\nРаспределение языков программирования\nДетекция файлов по расширениям\n\nML-анализ:\n\nPCA-визуализация многомерного пространства коммитов\nИнтерактивное исследование кластеров активности\n\n\n\n\n\nТехнологический стек\n\nBackend: R + Shiny\nData processing: dplyr, purrr, httr\nРабота с базами данных: duckdb, DBI\nВизуализация: ggplot2, plotly, heatmaps\nML: PCA\nAI-модель: YandexGPT (через Yandex Cloud)\nИнтеграции: GitHub API v3\n\n\n\nАрхитектура решения\nproject/ \n├── app.R             # Главный файл\n├── server/\n│ ├── server.R        # Главный серверный модуль\n│ ├── ETL.R           # Пайплайны данных (API → DataFrame)\n│ ├── ML.R            # ML-модели и преобразования\n│ └── data/  \n| │ ├── promt         # Промт для ML-модели \n| │ └── schema.json   # Схема для отчета\n├── ui/\n│ └── ui.R            # Пользовательский интерфейс\n└── README.md         # Документация\n\n\nОсобенности реализации\n\nОптимизация API-запросов:\n\nПагинация результатов\nПараллельная загрузка метаданных\nКэширование токена авторизации\n\nДинамический UI:\n\nСворачиваемые фильтры\nПрогресс-бары для долгих операций\nИнтерактивные подсказки\n\nML-пайплайн:\n\nАвтоматическая обработка категориальных признаков\nPCA с настройкой параметров\nИнтерактивная визуализация результатов"
  },
  {
    "objectID": "ML.html",
    "href": "ML.html",
    "title": "Функции ML",
    "section": "",
    "text": "perform_pca(commits, scale = TRUE){\n  ...\n  return(pca_data)\n}\nФункция выполняет анализ главных компонент (PCA) для данных о коммитах GitHub с расширенной предварительной обработкой и агрегацией данных.\n\n\n\nКомплексная предобработка:\n\nИзвлечение 15+ временных признаков из даты коммита\nКлассификация типов файлов через linguist (актуальные данные с GitHub)\nРасчет временных интервалов между коммитами\n\nАвтоматическая обработка:\n\nФильтрация признаков с нулевой дисперсией\nOne-hot кодирование категориальных переменных\nАгрегация на уровне коммитов\n\nИнтеграция с GitHub linguist:\n\nАвтоматическая загрузка актуальной версии languages.yml\nКлассификация файлов по расширениям и именам\n\n\n\n\n\n\ncommits - датафрейм с данными о коммитах (обязательный параметр)\nscale - логическое значение, указывающее нужно ли масштабировать данные перед PCA (по умолчанию TRUE)\n\n\n\n\n\npca_data - датафрейм, содержащий:\n\nМета-данные (id, author)\nПатчи (объединенные тексты изменений)\nКоординаты по главным компонентам\nЕвклидово расстояние от центра (поле distance)\n\n\n\n\n\n\nЗагрузка языковых данных:\n\nload_languages_data() # Загружает languages.yml с GitHub\n\nПредобработка:\n\nИзвлечение временных признаков (час, день недели и т.д.)\nКлассификация файлов (программирование, данные, документация)\n\nРасчет:\n\nВремени между коммитами\nОтношения добавленных/удаленных строк\nДлины сообщений и патчей\n\nАгрегация:\n\ngroup_by(id, author) %&gt;% summarise(...)\n\nВычисление PCA:\n\nprcomp(numeric_data, scale = scale)"
  },
  {
    "objectID": "ML.html#ключевые-особенности",
    "href": "ML.html#ключевые-особенности",
    "title": "Функции ML",
    "section": "",
    "text": "Комплексная предобработка:\n\nИзвлечение 15+ временных признаков из даты коммита\nКлассификация типов файлов через linguist (актуальные данные с GitHub)\nРасчет временных интервалов между коммитами\n\nАвтоматическая обработка:\n\nФильтрация признаков с нулевой дисперсией\nOne-hot кодирование категориальных переменных\nАгрегация на уровне коммитов\n\nИнтеграция с GitHub linguist:\n\nАвтоматическая загрузка актуальной версии languages.yml\nКлассификация файлов по расширениям и именам"
  },
  {
    "objectID": "ML.html#входные-данные",
    "href": "ML.html#входные-данные",
    "title": "Функции ML",
    "section": "",
    "text": "commits - датафрейм с данными о коммитах (обязательный параметр)\nscale - логическое значение, указывающее нужно ли масштабировать данные перед PCA (по умолчанию TRUE)"
  },
  {
    "objectID": "ML.html#выходные-данные",
    "href": "ML.html#выходные-данные",
    "title": "Функции ML",
    "section": "",
    "text": "pca_data - датафрейм, содержащий:\n\nМета-данные (id, author)\nПатчи (объединенные тексты изменений)\nКоординаты по главным компонентам\nЕвклидово расстояние от центра (поле distance)"
  },
  {
    "objectID": "ML.html#алгоритм-работы",
    "href": "ML.html#алгоритм-работы",
    "title": "Функции ML",
    "section": "",
    "text": "Загрузка языковых данных:\n\nload_languages_data() # Загружает languages.yml с GitHub\n\nПредобработка:\n\nИзвлечение временных признаков (час, день недели и т.д.)\nКлассификация файлов (программирование, данные, документация)\n\nРасчет:\n\nВремени между коммитами\nОтношения добавленных/удаленных строк\nДлины сообщений и патчей\n\nАгрегация:\n\ngroup_by(id, author) %&gt;% summarise(...)\n\nВычисление PCA:\n\nprcomp(numeric_data, scale = scale)"
  },
  {
    "objectID": "ML.html#ключевые-особенности-1",
    "href": "ML.html#ключевые-особенности-1",
    "title": "Функции ML",
    "section": "Ключевые особенности",
    "text": "Ключевые особенности\n\nСтатистический подход - использует стандартное отклонение для определения выбросов\nГибкий порог - регулируемый параметр threshold\nИнтеграция с PCA - работает с результатами функции perform_pca()\nПрозрачность - возвращает понятные метрики аномальности"
  },
  {
    "objectID": "ML.html#входные-данные-1",
    "href": "ML.html#входные-данные-1",
    "title": "Функции ML",
    "section": "Входные данные",
    "text": "Входные данные\n\npca_data - датафрейм с результатами PCA (обязательный параметр), содержащий:\n\ndistance - евклидово расстояние от центра\nid - идентификатор коммита\nauthor - автор коммита\npatches - тексты изменений\n\nthreshold - пороговое значение для z-оценки (по умолчанию 2)"
  },
  {
    "objectID": "ML.html#выходные-данные-1",
    "href": "ML.html#выходные-данные-1",
    "title": "Функции ML",
    "section": "Выходные данные:",
    "text": "Выходные данные:\n\noutliers - датафрейм с обнаруженными выбросами, содержащий:\n\nid - идентификатор коммита\nauthor - автор коммита\ndistance - евклидово расстояние\nz_score - стандартизированная z-оценка расстояния\npatches - тексты изменений"
  },
  {
    "objectID": "ML.html#алгоритм-работы-1",
    "href": "ML.html#алгоритм-работы-1",
    "title": "Функции ML",
    "section": "Алгоритм работы:",
    "text": "Алгоритм работы:\n\nСтандартизация расстояний:\n\nz_scores &lt;- scale(pca_data$distance)\n\nФильтрация выбросов:\n\nfilter(abs(z_scores) &gt;= threshold)"
  }
]