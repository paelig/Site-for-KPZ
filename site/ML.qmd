---
title: "Функции ML"
---

# perform_pca
```R
perform_pca(commits, scale = TRUE){
  ...
  return(pca_data)
}
```

Функция выполняет анализ главных компонент (PCA) для данных о коммитах GitHub с расширенной предварительной обработкой и агрегацией данных.

## Ключевые особенности

- Комплексная предобработка:
    - Извлечение 15+ временных признаков из даты коммита
    - Классификация типов файлов через linguist (актуальные данные с GitHub)
    - Расчет временных интервалов между коммитами
- Автоматическая обработка:
    - Фильтрация признаков с нулевой дисперсией
    - One-hot кодирование категориальных переменных
    - Агрегация на уровне коммитов
- Интеграция с GitHub linguist:
    - Автоматическая загрузка актуальной версии languages.yml
    - Классификация файлов по расширениям и именам
    
## Входные данные

- commits - датафрейм с данными о коммитах (обязательный параметр)
- scale - логическое значение, указывающее нужно ли масштабировать данные перед PCA (по умолчанию TRUE)

## Выходные данные

- pca_data - датафрейм, содержащий:
    - Мета-данные (id, author)
    - Патчи (объединенные тексты изменений)
    - Координаты по главным компонентам
    - Евклидово расстояние от центра (поле distance)
    
## Алгоритм работы
1. Загрузка языковых данных:
```R
load_languages_data() # Загружает languages.yml с GitHub
```
2. Предобработка:
    - Извлечение временных признаков (час, день недели и т.д.)
    - Классификация файлов (программирование, данные, документация)
3. Расчет:
    - Времени между коммитами
    - Отношения добавленных/удаленных строк
    - Длины сообщений и патчей
4. Агрегация:
```R
group_by(id, author) %>% summarise(...)
```
5. Вычисление PCA:
```R
prcomp(numeric_data, scale = scale)
```

# detect_outliers
```R  
  detect_outliers <- function(pca_data, threshold = 2) {
  ...
  return(outliers)
}
```

Функция выявляет аномальные коммиты на основе результатов PCA-анализа, используя метод z-показателей (стандартизированных отклонений).

## Ключевые особенности
- Статистический подход - использует стандартное отклонение для определения выбросов
- Гибкий порог - регулируемый параметр threshold
- Интеграция с PCA - работает с результатами функции perform_pca()
- Прозрачность - возвращает понятные метрики аномальности

## Входные данные
- pca_data - датафрейм с результатами PCA (обязательный параметр), содержащий:
    - distance - евклидово расстояние от центра
    - id - идентификатор коммита
    - author - автор коммита
    - patches - тексты изменений
- threshold - пороговое значение для z-оценки (по умолчанию 2)

## Выходные данные:
- outliers - датафрейм с обнаруженными выбросами, содержащий:
    - id - идентификатор коммита
    - author - автор коммита
    - distance - евклидово расстояние
    - z_score - стандартизированная z-оценка расстояния
    - patches - тексты изменений

## Алгоритм работы:
1. Стандартизация расстояний:
```R
z_scores <- scale(pca_data$distance)
```
2. Фильтрация выбросов:
```R
filter(abs(z_scores) >= threshold)
```